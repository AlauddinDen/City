ng new Angular --skip-tests
npm i bootstrap
ng g c viewcwc
ng g c addcwc
ng g i models/City
ng g i models/CountryWithCity
ng g i models/Country
ng g s service/CountryWithCity
"node_modules/bootstrap/dist/css/bootstrap.min.css"

first appconfig - provideHttpClient(withFetch())
appcomponent - [RouterOutlet,RouterLink,CommonModule],
app route - 
  { path: '', component: ViewCWCComponent },
  { path: 'Index', component: ViewCWCComponent },
  { path: 'Add', component: AddCWCComponent },
  { path: 'Index/edit/:id', component: EditCWCComponent },

appcpmponent html - 

<div class="container">
  <nav class="nav navbar-expand-lg">
    <ul class="nav navbar nav-item">
      <li class="nav nav-link">
        <a routerLink="Index">Home</a>
      </li>
      <li class="nav nav-link">
        <a routerLink="Add">Add New</a>
      </li>
    </ul>
  </nav>
  <router-outlet />
</div>

models- City- 

export interface City {
  id: 0;
  name: '';
  lot: 0;
  lan: 0;
  countryId: 0;
}

 models- CountryWithCities

import { City } from './city';
import { Country } from './country';

export interface CountryWithCities {
  country: Country;
  cities: City[];
}
model- country
import { City } from './city';

export interface Country {
  id: 0;
  name: '';
  iso2: '';
  iso3: '';
  picture: null;
  cities: City[];
}



service- 
import { HttpClient, httpResource } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CountryWithCities } from '../models/country-with-cities';
import { Country } from '../models/country';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class CountryWithCitiesService {
  constructor(private http: HttpClient) {}
  baseUrl = 'http://localhost:5121/api/City';

  getCWC() {
    return this.http.get<CountryWithCities[]>(
      `${this.baseUrl}/GetAllCountriesWithCities`
    );
  }

  postCWC(cwc: CountryWithCities) {
    return this.http.post<any>(`${this.baseUrl}/AddCountryAndCities`, cwc);
  }

  deleteCWC(countryId: number) {
    return this.http.delete<any>(
      `${this.baseUrl}/DeleteCountryAndCities/${countryId}`
    );
  }

  getCountry(countryId: number) {
    return this.http.get<CountryWithCities>(
      `${this.baseUrl}/GetCountryWithCitiesbyId/${countryId}`
    );
  }
  updateCWC(
    countryId: number,
    country: Country
  ): Observable<CountryWithCities> {
    return this.http.put<CountryWithCities>(
      `${this.baseUrl}/PutCountryAndCities/${countryId}`,
      country
    );
  }
}

app.UseCors(options =>
{
    options.AllowAnyOrigin();
    options.AllowAnyMethod();
    options.AllowAnyHeader();
});

